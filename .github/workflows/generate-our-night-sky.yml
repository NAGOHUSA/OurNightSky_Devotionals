name: Generate Our Night Sky Devotional (v2-fixed)

on:
  schedule:
    # Run at 04:00 America/New_York year-round (handles EDT/EST by doubling)
    - cron: "0 8 * * *"   # 04:00 when ET = UTC-4 (EDT)
    - cron: "0 9 * * *"   # 04:00 when ET = UTC-5 (EST)
  workflow_dispatch: {}

# Prevent overlapping runs from racing commits
concurrency:
  group: devotional-${{ github.ref }}
  cancel-in-progress: false

jobs:
  generate-devotional:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      # ---- App config ----
      ONS_LOCATION: "USA"
      ONS_THEME_DEFAULT: "wonder"

      # ---- Provider bases & models ----
      # Groq (OpenAI-compatible)
      GROQ_API_BASE: "https://api.groq.com/openai/v1"
      GROQ_MODEL: "llama-3.1-8b-instant"

      # OpenAI
      OPENAI_API_BASE: "https://api.openai.com/v1"
      OPENAI_MODEL: "gpt-4o-mini"

      # DeepSeek
      DEEPSEEK_API_BASE: "https://api.deepseek.com/v1"
      DEEPSEEK_MODEL: "deepseek-chat"

      # (Optional) x.ai Grok — only if your script also supports it
      GROK_API_BASE: "https://api.x.ai/v1"
      GROK_MODEL: "grok-2-latest"

      NODE_ENV: "production"
      FORCE_COLOR: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # required for rebase before push

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      # Show which keys made it to the runner (masked)
      - name: Check which provider keys are set (masked)
        run: |
          set -euo pipefail
          for k in GROQ_API_KEY GROK_API_KEY OPENAI_API_KEY DEEPSEEK_API_KEY; do
            if [ -n "${!k:-}" ]; then echo "$k = present"; else echo "$k = MISSING"; fi
          done
        env:
          GROQ_API_KEY:     ${{ secrets.GROQ_API_KEY }}
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          # Back-compat: map GROQ secret into GROK var if script still reads it
          GROK_API_KEY:     ${{ secrets.GROQ_API_KEY }}

      - name: Jitter (avoid synchronized calls)
        run: sleep $((RANDOM % 30))

      - name: Generate devotional
        env:
          # Pass provider keys
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY:   ${{ secrets.DEEPSEEK_API_KEY }}
          # Back-compat mapping for scripts that used GROK_*
          GROK_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          # Enable unique local fallback if ALL APIs fail
          ALLOW_LOCAL_FALLBACK: "1"
        run: |
          set -euo pipefail
          mkdir -p devotionals
          node generate-our-night-sky.js

      - name: List devotionals (debug)
        run: |
          set -euo pipefail
          ls -la devotionals || true
          TODAY=$(date -u +'%Y-%m-%d')
          if [ -f "devotionals/${TODAY}.json" ]; then
            echo "----- Head of today's file (${TODAY}.json) -----"
            head -n 30 "devotionals/${TODAY}.json" || true
            echo "-----------------------------------------------"
          fi

      - name: Verify output exists for today (UTC)
        run: |
          set -euo pipefail
          TODAY=$(date -u +'%Y-%m-%d')
          if [ ! -f "devotionals/${TODAY}.json" ]; then
            echo "Expected devotionals/${TODAY}.json was not produced."
            exit 1
          fi
          echo "Found devotionals/${TODAY}.json"

      - name: Duplicate guard vs yesterday (defense-in-depth)
        run: |
          set -euo pipefail
          TODAY=$(date -u +'%Y-%m-%d')
          YESTERDAY=$(date -u -d "yesterday" +'%Y-%m-%d')
          if [ -f "devotionals/${YESTERDAY}.json" ]; then
            CURR_HASH=$(sha256sum "devotionals/${TODAY}.json" | cut -d' ' -f1)
            PREV_HASH=$(sha256sum "devotionals/${YESTERDAY}.json" | cut -d' ' -f1)
            if [ "$CURR_HASH" = "$PREV_HASH" ]; then
              echo "Duplicate content hash vs yesterday — failing to avoid publishing a repeat."
              exit 1
            fi
          fi
          echo "No hash-level duplicate detected."

      - name: Commit & push if changed (with rebase + retries)
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add devotionals
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore: devotional for $(date -u +'%Y-%m-%d') [v2]"

          # Rebase our commit(s) on top of the latest remote to avoid non-fast-forward errors
          git fetch origin main
          git rebase origin/main || { echo "Rebase failed."; git rebase --abort; exit 1; }

          # Push with up to 3 retries in case another workflow landed between rebase and push
          for attempt in 1 2 3; do
            if git push origin HEAD:main; then
              echo "Pushed on attempt $attempt"
              exit 0
            fi
            echo "Push attempt $attempt failed — refetch & rebase, then retry..."
            git fetch origin main
            git rebase origin/main || { echo "Rebase failed on retry."; git rebase --abort; exit 1; }
            sleep $((attempt * 3))
          done

          echo "Push failed after retries."
          exit 1
