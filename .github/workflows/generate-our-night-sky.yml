# .github/workflows/generate-our-night-sky.yml
name: Generate Our Night Sky Devotional (v2-fixed-rescue)

on:
  schedule:
    # 04:00 America/New_York (handles EDT/EST)
    - cron: "0 8 * * *"   # EDT
    - cron: "0 9 * * *"   # EST
  workflow_dispatch: {}

concurrency:
  group: devotional-${{ github.ref }}
  cancel-in-progress: false

jobs:
  generate-devotional:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      # ---- App config ----
      ONS_LOCATION: "USA"
      ONS_THEME_DEFAULT: "wonder"

      # ---- Provider bases/models ----
      # Groq (OpenAI-compatible)
      GROQ_API_BASE: "https://api.groq.com/openai/v1"
      GROQ_MODEL: "llama-3.1-8b-instant"

      # OpenAI
      OPENAI_API_BASE: "https://api.openai.com/v1"
      OPENAI_MODEL: "gpt-4o-mini"

      # DeepSeek
      DEEPSEEK_API_BASE: "https://api.deepseek.com/v1"
      DEEPSEEK_MODEL: "deepseek-chat"

      # Optional x.ai Grok (only if your script still supports it)
      GROK_API_BASE: "https://api.x.ai/v1"
      GROK_MODEL: "grok-2-latest"

      NODE_ENV: "production"
      FORCE_COLOR: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Check which provider keys are set (masked)
        run: |
          set -euo pipefail
          for k in GROQ_API_KEY GROK_API_KEY OPENAI_API_KEY DEEPSEEK_API_KEY; do
            if [ -n "${!k:-}" ]; then echo "$k = present"; else echo "$k = MISSING"; fi
          done
        env:
          GROQ_API_KEY:     ${{ secrets.GROQ_API_KEY }}
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          # Map Groq secret to legacy GROK var if your script still uses it
          GROK_API_KEY:     ${{ secrets.GROQ_API_KEY }}

      - name: Jitter (avoid synchronized calls)
        run: sleep $((RANDOM % 30))

      - name: Generate devotional
        env:
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY:   ${{ secrets.DEEPSEEK_API_KEY }}
          # Legacy mapping for x.ai var name if referenced
          GROK_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          # Allow your script's local fallback path
          ALLOW_LOCAL_FALLBACK: "1"
        run: |
          set -euo pipefail
          mkdir -p devotionals
          node generate-our-night-sky.js || true  # don't stop here; we'll rescue if needed

      - name: List devotionals (debug)
        run: |
          set -euo pipefail
          ls -la devotionals || true

      # ---- RESCUE: If today's file is still missing, synthesize a safe, date-unique fallback ----
      - name: Rescue (create local fallback if missing)
        run: |
          set -euo pipefail
          TODAY=$(date -u +'%Y-%m-%d')
          if [ ! -f "devotionals/${TODAY}.json" ]; then
            echo "Rescue: creating local fallback for ${TODAY}"
            node - <<'NODE'
              const fs = require('fs');
              const path = require('path');
              const crypto = require('crypto');

              const TODAY = new Date().toISOString().slice(0,10);
              const OUT_DIR = path.join(process.cwd(), "devotionals");
              const OUT_FILE = path.join(OUT_DIR, `${TODAY}.json`);
              if (!fs.existsSync(OUT_DIR)) fs.mkdirSync(OUT_DIR, { recursive: true });

              // Rough moon phase estimator
              function phase(dateStr){
                const d = new Date(dateStr + "T00:00:00Z");
                const knownNew = new Date("2025-09-03T00:00:00Z");
                const days = (d - knownNew)/86400000;
                const p = ((days % 29.53) + 29.53) % 29.53;
                if (p < 1.0) return "New";
                if (p < 6.4) return "Waxing Crescent";
                if (p < 8.9) return "First Quarter";
                if (p < 14.8) return "Waxing Gibbous";
                if (p < 15.8) return "Full";
                if (p < 22.1) return "Waning Gibbous";
                if (p < 24.7) return "Last Quarter";
                return "Waning Crescent";
              }
              function pick(arr, seed){
                return arr[seed % arr.length];
              }
              const seeds = [
                {ref:"Psalm 19:1", tag:"Glory"},
                {ref:"Psalm 8:3-4", tag:"Wonder"},
                {ref:"Isaiah 40:26", tag:"Strength"},
                {ref:"Genesis 1:16", tag:"Creation"},
                {ref:"Philippians 2:15", tag:"Shine"},
                {ref:"James 1:17", tag:"Gifts"},
              ];
              const constellations = ["Cassiopeia","Andromeda","Cygnus","Pegasus","Perseus","Aquarius","Capricornus","Pisces"];
              const planetSets = [
                ["Jupiter","Saturn"],
                ["Venus","Jupiter"],
                ["Mars","Jupiter"],
                ["Saturn","Mars"],
                ["Venus","Saturn"]
              ];
              const n = parseInt(crypto.createHash("sha256").update(TODAY).digest("hex").slice(0,8),16);
              const seed = pick(seeds, n);
              const cons = pick(constellations, n);
              const planets = pick(planetSets, n);
              const ph = phase(TODAY);
              const title = `${seed.tag} in the Night`;
              const scriptureReference = seed.ref;
              const theme = (process.env.ONS_THEME_DEFAULT || "wonder");
              const location = (process.env.ONS_LOCATION || "USA");
              const content = `As we look up on ${TODAY}, the sky invites us to ${theme.toLowerCase()}. Even without a telescope, you can step outside, breathe, and notice the quiet order God set above us. Let this be your prayer: “Lord, tune my heart to see what You reveal in creation and to trust what You have promised in Your Word.”`;
              const body = content.trim();
              const id = crypto.createHash("sha256").update(`${TODAY}|${title}|${scriptureReference}|${body}`).digest("hex").slice(0,32);
              const out = {
                app: "Our Night Sky",
                id,
                date: TODAY,
                title,
                scriptureReference,
                content: body,
                celestialConnection: `Under ${cons} and a ${ph} Moon, we remember ${scriptureReference} in ${location}.`,
                theme,
                moonPhase: ph.includes(" ") ? ph.split(" ")[0] : ph,
                visiblePlanets: planets,
                createdAt: new Date().toISOString(),
                usedProvider: null,
                isFallback: true,
                fallbackType: "rescue"
              };
              fs.writeFileSync(OUT_FILE, JSON.stringify(out, null, 2), "utf8");
              console.log("Rescue wrote:", OUT_FILE);
            NODE
          else
            echo "Rescue not needed; today's file already exists."
          fi

      - name: Verify output exists for today (UTC)
        run: |
          set -euo pipefail
          TODAY=$(date -u +'%Y-%m-%d')
          if [ ! -f "devotionals/${TODAY}.json" ]; then
            echo "Expected devotionals/${TODAY}.json was not produced."
            exit 1
          fi
          echo "Found devotionals/${TODAY}.json"

      - name: Duplicate guard vs yesterday (defense-in-depth)
        run: |
          set -euo pipefail
          TODAY=$(date -u +'%Y-%m-%d')
          YESTERDAY=$(date -u -d "yesterday" +'%Y-%m-%d')
          if [ -f "devotionals/${YESTERDAY}.json" ]; then
            CURR_HASH=$(sha256sum "devotionals/${TODAY}.json" | cut -d' ' -f1)
            PREV_HASH=$(sha256sum "devotionals/${YESTERDAY}.json" | cut -d' ' -f1)
            if [ "$CURR_HASH" = "$PREV_HASH" ]; then
              echo "Duplicate content hash vs yesterday — failing to avoid publishing a repeat."
              exit 1
            fi
          fi
          echo "No hash-level duplicate detected."

      - name: Commit & push if changed (with rebase + retries)
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add devotionals
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: devotional for $(date -u +'%Y-%m
