name: Generate Our Night Sky Devotional

on:
  schedule:
    # 09:00 UTC daily (5:00 AM Eastern Standard / 4:00 AM Eastern Daylight)
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      target_date:
        description: "YYYY-MM-DD to (re)generate (UTC). Leave blank for today."
        required: false
      force_overwrite:
        description: "Overwrite if a devotional for that date already exists"
        type: boolean
        default: false
        required: false

permissions:
  contents: write

concurrency:
  group: ons-devotional-${{ github.event.inputs.target_date || github.run_id }}
  cancel-in-progress: false

jobs:
  generate-devotional:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps if present
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm i
          elif [ -f package.json ]; then
            npm i
          else
            echo "No package.json found."
          fi

      - name: Resolve target date (UTC)
        id: date
        run: |
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            DATE_IN="${{ github.event.inputs.target_date }}"
          else
            DATE_IN="$(date -u +'%Y-%m-%d')"
          fi
          if ! echo "$DATE_IN" | grep -Eq '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
            echo "Invalid target_date format. Use YYYY-MM-DD."
            exit 1
          fi
          echo "value=$DATE_IN" >> "$GITHUB_OUTPUT"

      - name: Force delete existing file (if requested)
        if: ${{ github.event.inputs.force_overwrite == 'true' }}
        run: |
          set -e
          D="${{ steps.date.outputs.value }}"
          rm -f "./devotionals/$D.json" "./$D.json"

      - name: Generate devotional
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          TZ: "UTC"
          TARGET_DATE: ${{ steps.date.outputs.value }}
          FORCE_OVERWRITE: ${{ github.event.inputs.force_overwrite || 'false' }}
        run: |
          set -e
          if [ ! -f "./generate-our-night-sky.js" ]; then
            echo "Missing ./generate-our-night-sky.js at repo root."
            exit 1
          fi
          echo "Running generator for TARGET_DATE=$TARGET_DATE (UTC)"
          node ./generate-our-night-sky.js

      - name: Debug – show recent files
        run: |
          echo "=== Recent JSON files (last 15 min) ==="
          find . -type f -name "*.json" -mmin -15 -print || true
          echo "=== devotionals directory ==="
          ls -al devotionals || echo "No devotionals dir"

      - name: Verify & normalize output
        id: norm
        run: |
          set -e
          D="${{ steps.date.outputs.value }}"
          mkdir -p devotionals
          TARGET_PATH="./devotionals/$D.json"
          
          # Check if file already exists in the correct location
          if [ -f "$TARGET_PATH" ]; then
            echo "✅ File already in correct location: $TARGET_PATH"
            echo "out=devotionals/$D.json" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Look for the file in alternative locations
          CANDIDATES=$(printf "%s\n" \
            "./$D.json" \
            "$(find . -maxdepth 3 -type f -name "*$D*.json" -print | tr '\n' ' ')")
          
          FOUND=""
          for f in $CANDIDATES; do
            if [ -f "$f" ] && [ "$f" != "$TARGET_PATH" ]; then
              FOUND="$f"
              break
            fi
          done
          
          if [ -z "$FOUND" ]; then
            echo "❌ Expected devotional file not found in any location"
            exit 1
          fi
          
          echo "📦 Moving from $FOUND to $TARGET_PATH"
          mv -f "$FOUND" "$TARGET_PATH"
          echo "out=devotionals/$D.json" >> "$GITHUB_OUTPUT"
          echo "✅ Normalized to devotionals/$D.json"

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit & push changes
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: devotional for ${{ steps.date.outputs.value }} [ci]"
          git -c rebase.autostash=true pull --rebase origin main
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
