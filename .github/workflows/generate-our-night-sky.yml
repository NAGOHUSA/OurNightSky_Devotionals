name: Generate Our Night Sky Devotional

on:
  schedule:
    # 09:00 UTC daily (5:00 AM Eastern during Standard Time; 4:00 AM during DST)
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      target_date:
        description: "YYYY-MM-DD to (re)generate (UTC). Leave blank for today."
        required: false
      force_overwrite:
        description: "Overwrite if a devotional for that date already exists"
        type: boolean
        default: false
        required: false

permissions:
  contents: write

# Prevent two runs for the same target date from colliding.
# On manual runs we include the date; on scheduled runs it resolves to today's UTC date.
concurrency:
  group: ons-devotional-${{ github.event.inputs.target_date || github.run_id }}
  cancel-in-progress: false

jobs:
  generate-devotional:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps if present
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm i
          elif [ -f package.json ]; then
            npm i
          else
            echo "No package.json found."
          fi

      - name: Resolve target date (UTC)
        id: date
        run: |
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            DATE_IN="${{ github.event.inputs.target_date }}"
          else
            DATE_IN="$(date -u +'%Y-%m-%d')"
          fi

          # Basic validation: must be YYYY-MM-DD
          if ! echo "$DATE_IN" | grep -Eq '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
            echo "Invalid target_date format. Use YYYY-MM-DD."
            exit 1
          fi

          echo "value=$DATE_IN" >> "$GITHUB_OUTPUT"

      - name: Force delete existing file for the date (if requested)
        if: ${{ github.event.inputs.force_overwrite == 'true' }}
        run: |
          set -e
          D="${{ steps.date.outputs.value }}"
          # Remove in common locations (adjust if your repo uses a different path)
          rm -f "./devotionals/$D.json" "./$D.json"

      - name: Generate devotional
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          TZ: "UTC"
          TARGET_DATE: ${{ steps.date.outputs.value }}
          FORCE_OVERWRITE: ${{ github.event.inputs.force_overwrite || 'false' }}
        run: |
          set -e
          if [ ! -f "./generate-our-night-sky.js" ]; then
            echo "Missing ./generate-our-night-sky.js at repo root."
            exit 1
          fi
          node ./generate-our-night-sky.js

      - name: Verify output exists
        run: |
          set -e
          OUT_A="./devotionals/${{ steps.date.outputs.value }}.json"
          OUT_B="./${{ steps.date.outputs.value }}.json"
          if [ -f "$OUT_A" ]; then
            echo "Found $OUT_A"
          elif [ -f "$OUT_B" ]; then
            echo "Found $OUT_B"
          else
            echo "Expected $OUT_A or $OUT_B but neither exists."
            exit 1
          fi

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes if any
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: devotional for ${{ steps.date.outputs.value }} [ci]"

      - name: Rebase and push
        run: |
          set -e
          # Rebase onto latest main (autostash if needed) then push
          git -c rebase.autostash=true pull --rebase origin main
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
